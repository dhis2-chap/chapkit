[project]
name = "chapkit"
version = "0.3.2"
description = "ML and data service modules built on servicekit - config, artifacts, tasks, and ML workflows"
readme = "README.md"
authors = [{ name = "Morten Hansen", email = "morten@winterop.com" }]
license = { text = "AGPL-3.0-or-later" }
requires-python = ">=3.13"
keywords = [
  "ml",
  "machine-learning",
  "data-science",
  "artifacts",
  "tasks",
  "config",
  "servicekit",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Framework :: FastAPI",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
  "pandas>=2.3.3",
  "scikit-learn>=1.7.2",
  "geojson-pydantic>=2.1.0",
  "servicekit>=0.2.0",
  "typer>=0.20.0",
  "jinja2>=3.1.6",
]

[project.urls]
Homepage = "https://github.com/dhis2-chap/chapkit"
Repository = "https://github.com/dhis2-chap/chapkit"
Issues = "https://github.com/dhis2-chap/chapkit/issues"
Documentation = "https://dhis2-chap.github.io/chapkit"

[project.scripts]
chapkit = "chapkit.cli.cli:main"

[dependency-groups]
dev = [
  "coverage[toml]>=7.6.0",
  "mypy>=1.18.2",
  "pandas-stubs>=2.2.3.250101",
  "pytest>=8.4.2",
  "pytest-cov>=5.0.0",
  "pytest-asyncio>=1.2.0",
  "ruff>=0.14.0",
  "pyright>=1.1.406",
  "scikit-learn>=1.7.2",
  "mkdocs>=1.6.0",
  "mkdocs-material>=9.5.0",
  "mkdocstrings[python]>=0.26.0",
  "types-pyyaml>=6.0.12.20250915",
]

[build-system]
requires = ["uv_build>=0.9.0,<0.10.0"]
build-backend = "uv_build"

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
fixable = ["ALL"]
select = ["E", "W", "F", "I", "D"]
ignore = ["D203", "D213"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"alembic/**/*.py" = ["D"]
"**/__init__.py" = ["D104"]
"src/**/*.py" = ["D102", "D105", "D107"]
"examples/**/*.py" = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
norecursedirs = ["examples", ".git", ".venv", "__pycache__"]
filterwarnings = [
  "ignore:Pydantic serializer warnings:UserWarning",
  "ignore:Remove.*format_exc_info.*:UserWarning",
]

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
relative_files = true
source = ["chapkit"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]
precision = 2
show_missing = true
skip_covered = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_unused_ignores = true
strict_equality = true
mypy_path = ["src", "typings"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "servicekit.*"
ignore_missing_imports = true
disallow_any_unimported = false

[[tool.mypy.overrides]]
module = [
  "chapkit.artifact.*",
  "chapkit.config.*",
  "chapkit.task.*",
  "examples.*",
]
warn_return_any = false

[[tool.mypy.overrides]]
module = "examples.custom_migrations.*"
ignore_missing_imports = true
ignore_errors = true

[tool.pyright]
include = ["src", "tests", "examples", "alembic"]
pythonVersion = "3.13"
typeCheckingMode = "strict"
diagnosticMode = "workspace"
useLibraryCodeForTypes = true
reportPrivateUsage = false
reportUnusedFunction = false
reportUnusedTypeParameters = true
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false

[tool.uv.sources]
servicekit = { git = "https://github.com/winterop-com/servicekit.git" }
